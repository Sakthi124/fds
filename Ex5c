import matplotlib.pyplot as plt

import numpy as np

import pandas as pd

import seaborn as sns

from scipy import stats

import statsmodels.api as sm

from statsmodels.stats import diagnostic as diag

from statsmodels.stats.outliers_influence import variance_inflation_factor

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

import warnings

warnings.filterwarnings("ignore")

diabetes = pd.read_csv("/diabetes.csv")

print(diabetes)

corr=diabetes.corr()
display(corr)

sns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,cmap='RdBu')

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

import pandas as pd

# Assuming "diabetes" is your DataFrame

x = diabetes.drop("Outcome", axis=1)

y = diabetes["Outcome"]

# Fix the typo in the next line

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)

regression_model = LinearRegression()

regression_model.fit(x_train, y_train)

# Fix the typo in the next line

intercept = regression_model.intercept_

coefficient = regression_model.coef_[0]

print("The intercept for our model is {:.4f}".format(intercept))

print('-' * 100)

# Fix the typo in the next line

for coef in zip(x.columns,regression_model.coef_):

print("the coefficient for{}is{:.2}".format(coef[0],coef[1]))

y_predict = regression_model.predict(x_test)

print(y_predict[:5])

x2=sm.add_constant(x)

model=sm.OLS(y,x2)

est=model.fit()

print(est.summary())

sm.OLS

print(est.conf_int())

print()

print(est.pvalues)

print()

from sklearn.metrics import mean_squared_error, mean_absolute_error

import math

# Assuming y_predict is already calculated

model_mse = mean_squared_error(y_test, y_predict)

model_mae = mean_absolute_error(y_test, y_predict)

model_rmse = math.sqrt(model_mse)

print("MSE {:.3f}".format(model_mse))

print("MAE {:.3f}".format(model_mae))

print("RMSE {:.3f}".format(model_rmse))

model_r2=r2_score(y_test,y_predict)

print("R2:{:.2}".format(model_r2)
